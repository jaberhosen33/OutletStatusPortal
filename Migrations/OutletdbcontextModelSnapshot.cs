// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutletStatusPortal.Models;

#nullable disable

namespace OutletStatusPortal.Migrations
{
    [DbContext(typeof(Outletdbcontext))]
    partial class OutletdbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OutletStatusPortal.Models.AfterOutletSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssignedPersons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourierStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EPSLive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkVendor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeITSetup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutletITSetup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SapId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sl")
                        .HasColumnType("int");

                    b.Property<int?>("beforeOutletSetUpSl")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("beforeOutletSetUpSl");

                    b.ToTable("AfterOutletSetups");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.BeforeOutletSetUp", b =>
                {
                    b.Property<int>("Sl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sl"), 1L, 1);

                    b.Property<int>("Icmo")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Om")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutletCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutletName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<int>("Router")
                        .HasColumnType("int");

                    b.Property<int>("Scanner")
                        .HasColumnType("int");

                    b.Property<int>("Server")
                        .HasColumnType("int");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int");

                    b.Property<int>("StockType")
                        .HasColumnType("int");

                    b.HasKey("Sl");

                    b.HasIndex("StockItemId");

                    b.ToTable("BeforeOutletSetUps");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.DeviceSetupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sl")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Sl");

                    b.ToTable("DeviceSetupStatuses");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.StockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Icmo")
                        .HasColumnType("int");

                    b.Property<int>("Om")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutletName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<int>("Router")
                        .HasColumnType("int");

                    b.Property<int>("Scanner")
                        .HasColumnType("int");

                    b.Property<int>("Server")
                        .HasColumnType("int");

                    b.Property<string>("StockType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.StockTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Icmo")
                        .HasColumnType("int");

                    b.Property<int>("Om")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutletCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<int>("Router")
                        .HasColumnType("int");

                    b.Property<int>("Scanner")
                        .HasColumnType("int");

                    b.Property<int>("Server")
                        .HasColumnType("int");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StockItemId");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.Users", b =>
                {
                    b.Property<string>("StafId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StafId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            StafId = "l53335",
                            Date = new DateTime(2025, 7, 18, 20, 21, 25, 873, DateTimeKind.Local).AddTicks(3485),
                            Name = "Jaber Hosen",
                            PassWord = "1234",
                            Phone = "01700000001",
                            Role = "Admin"
                        },
                        new
                        {
                            StafId = "l54445",
                            Date = new DateTime(2025, 7, 18, 20, 21, 25, 873, DateTimeKind.Local).AddTicks(3487),
                            Name = "Sadia Akter",
                            PassWord = "jaber hosen",
                            Phone = "01700000002",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("OutletStatusPortal.Models.AfterOutletSetup", b =>
                {
                    b.HasOne("OutletStatusPortal.Models.BeforeOutletSetUp", "beforeOutletSetUp")
                        .WithMany()
                        .HasForeignKey("beforeOutletSetUpSl");

                    b.Navigation("beforeOutletSetUp");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.BeforeOutletSetUp", b =>
                {
                    b.HasOne("OutletStatusPortal.Models.StockItem", "StockItem")
                        .WithMany()
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.DeviceSetupStatus", b =>
                {
                    b.HasOne("OutletStatusPortal.Models.BeforeOutletSetUp", "Outlet")
                        .WithMany("DeviceStatuses")
                        .HasForeignKey("Sl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.StockTransaction", b =>
                {
                    b.HasOne("OutletStatusPortal.Models.StockItem", "StockItem")
                        .WithMany("Transactions")
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.BeforeOutletSetUp", b =>
                {
                    b.Navigation("DeviceStatuses");
                });

            modelBuilder.Entity("OutletStatusPortal.Models.StockItem", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
